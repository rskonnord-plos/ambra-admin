<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ $HeadURL$
  ~ $Id$
  ~ Copyright (c) 2006-2012 by Public Library of Science http://plos.org http://ambraproject.org
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:util="http://www.springframework.org/schema/util"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-2.0.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-2.0.xsd
       http://activemq.apache.org/schema/core http://activemq.apache.org/schema/core/activemq-core.xsd
       http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd">


  <!-- *****************************
    *
    *
    *   Classes in ambra webapp
    *
    *
    *****************************************-->

  <bean id="propertyConfigurer" class="org.ambraproject.configuration.SpringPlaceholderConfigurer"/>

  <bean id="defaultEncodingCharset" class="java.lang.String">
    <constructor-arg value="UTF-8"/>
  </bean>

  <!--This is kind of a legacy property, but it's used to decide what kind of alerts to show to users.  Needs to be the same as ambra's
      TODO: Refactor away the need for this-->
  <bean id="applicationId" class="java.lang.String">
    <constructor-arg value="topaz-ambra"/>
  </bean>

  <util:map id="otherConstants" map-class="java.util.HashMap">
    <entry key="countries" value-ref="countries"/>
  </util:map>

  <!-- freemarker configs -->
  <bean id="ambraFreemarkerConfig" class="org.ambraproject.freemarker.AmbraFreemarkerConfig">
    <constructor-arg index="0" ref="ambraConfiguration"/>
  </bean>

  <bean id="ambraFreemarkerManager" class="org.ambraproject.freemarker.AmbraFreemarkerManager">
    <property name="ambraConfiguration" ref="ambraConfiguration"/>
    <property name="ambraFreemarkerConfig" ref="ambraFreemarkerConfig"/>
  </bean>

  <!--Http Client-->
  <bean id="httpConnectionManagerParams" class="org.apache.commons.httpclient.params.HttpConnectionManagerParams">
    <!-- time out after 30 sec -->
    <property name="soTimeout" value="30000"/>
    <property name="connectionTimeout" value="30000"/>
  </bean>

  <bean id="multiThreadedHttpConnectionManager"
        class="org.apache.commons.httpclient.MultiThreadedHttpConnectionManager">
    <property name="params" ref="httpConnectionManagerParams"/>
  </bean>

  <bean id="httpClient" class="org.apache.commons.httpclient.HttpClient">
    <constructor-arg index="0" ref="multiThreadedHttpConnectionManager"/>
  </bean>


  <!--service beans-->

  <bean id="articleService" class="org.ambraproject.service.article.ArticleServiceImpl">
    <property name="sessionFactory" ref="hibernateSessionFactory"/>
    <property name="permissionsService" ref="permissionsService"/>
  </bean>

  <bean id="journalCreator" class="org.ambraproject.service.journal.JournalCreatorImpl"
        init-method="createJournals">
    <property name="configuration" ref="ambraConfiguration"/>
    <property name="sessionFactory" ref="hibernateSessionFactory"/>
  </bean>

  <bean id="permissionsService" class="org.ambraproject.service.permission.PermissionsServiceImpl">
    <property name="sessionFactory" ref="hibernateSessionFactory"/>
    <property name="rolesCache" ref="rolesCache"/>
  </bean>

  <bean id="adminRolesService" class="org.ambraproject.admin.service.impl.AdminRolesServiceImpl">
    <property name="sessionFactory" ref="hibernateSessionFactory"/>
    <property name="permissionsService" ref="permissionsService"/>
  </bean>

  <bean id="userService" class="org.ambraproject.service.user.UserServiceImpl">
    <property name="sessionFactory" ref="hibernateSessionFactory"/>
    <property name="permissionsService" ref="permissionsService"/>
    <property name="configuration" ref="ambraConfiguration"/>
  </bean>

  <bean id="annotationService" class="org.ambraproject.service.annotation.AnnotationServiceImpl">
    <property name="sessionFactory" ref="hibernateSessionFactory"/>
  </bean>

  <bean id="journalService" class="org.ambraproject.service.journal.JournalServiceImpl"
        depends-on="journalCreator">
    <property name="configuration" ref="ambraConfiguration"/>
    <property name="sessionFactory" ref="hibernateSessionFactory"/>
  </bean>

  <bean id="solrServerFactory" class="org.ambraproject.service.search.SolrServerFactory">
    <constructor-arg ref="ambraConfiguration"/>
  </bean>

  <bean id="browseService" class="org.ambraproject.service.article.BrowseServiceImpl">
    <property name="sessionFactory" ref="hibernateSessionFactory"/>
    <property name="journalService" ref="journalService"/>
    <property name="articleService" ref="articleService"/>
    <property name="browseSolrCache" ref="browseSolrCache"/>
    <property name="configuration" ref="ambraConfiguration"/>
    <property name="serverFactory" ref="solrServerFactory"/>
  </bean>

  <bean id="articleAssetService" class="org.ambraproject.service.article.ArticleAssetServiceImpl">
    <property name="sessionFactory" ref="hibernateSessionFactory"/>
    <property name="permissionsService" ref="permissionsService"/>
    <property name="articleService" ref="articleService"/>
    <property name="templatesDirectory" value="${ambra.virtualJournals.templateDir}"/>
    <property name="fileStoreService" ref="fileStoreService"/>
  </bean>

  <bean id="profanityCheckingService" class="org.ambraproject.util.ProfanityCheckingServiceImpl">
    <property name="profaneWords" ref="profaneWords"/>
  </bean>

  <!--Caches from ambra.  Must add a bean for each one that we want to be able to clear-->
  <bean id="cacheManager" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">
    <property name="configLocation" value="file://${ambra.services.ehcache.configFileLocation}"/>
    <property name="shared" value="true"/>
  </bean>

  <bean id="browseSolrCache" class="org.ambraproject.service.cache.EhcacheProvider">
    <constructor-arg index="0" ref="browseSolrEhcache"/>
    <constructor-arg index="1" value="false"/>
  </bean>
  <bean id="articleHtmlCache" class="org.ambraproject.service.cache.EhcacheProvider">
    <constructor-arg index="0" ref="articleHtmlEhcache"/>
  </bean>

  <bean id="browseSolrEhcache" class="org.springframework.cache.ehcache.EhCacheFactoryBean">
    <property name="cacheName" value="BrowseSolrCache"/>
  </bean>

  <bean id="articleHtmlEhcache" class="org.springframework.cache.ehcache.EhCacheFactoryBean">
    <property name="cacheName" value="ArticleHtmlCache"/>
  </bean>

  <bean id="rolesEhCache" class="org.springframework.cache.ehcache.EhCacheFactoryBean">
    <property name="cacheName" value="RolesCache"/>
  </bean>

  <bean id="rolesCache" class="org.ambraproject.service.cache.EhcacheProvider">
    <constructor-arg index="0" ref="rolesEhCache"/>
  </bean>

  <!-- *****************************
    *
    *
    *   Classes from sibling projects (configuration helper, emailer, etc.)
    *
    *
    *****************************************-->

  <bean id="ambraMailer" class="org.ambraproject.service.mailer.AmbraMailerImpl">
    <property name="fromEmailAddress" value="application@plosone.org"/>
    <property name="feedbackEmailMap">
      <map>
        <entry key="text" value="feedback-text.ftl"/>
        <entry key="html" value="feedback-html.ftl"/>
        <entry key="subject" value="My feedback for PLoS ONE"/>
        <entry key="toEmailAddress" value="${ambra.platform.email.feedback}"/>
      </map>
    </property>
    <property name="emailThisArticleMap">
      <map>
        <entry key="text" value="emailThisArticle-text.ftl"/>
        <entry key="html" value="emailThisArticle-html.ftl"/>
        <entry key="url" value="${ambra.services.crossref.plos.doiurl}"/>
        <entry key="subject" value="An Article from "/>
      </map>
    </property>
    <property name="errorEmailMap">
      <map>
        <entry key="text" value="emailError-text.ftl"/>
        <entry key="html" value="emailError-html.ftl"/>
        <entry key="toEmailAddress" value="${ambra.platform.email.errors}"/>
        <entry key="subject" value="An ambra error has occured"/>
      </map>
    </property>
  </bean>
  <bean id="configurationStore" class="org.ambraproject.configuration.ConfigurationStore"
        factory-method="getInstance"/>

  <bean id="ambraConfiguration" factory-bean="configurationStore" factory-method="getConfiguration"/>

  <bean id="documentBuilderFactory" class="org.ambraproject.util.DocumentBuilderFactoryCreator"
        factory-method="createFactory"/>

  <bean id="documentBuilder" class="javax.xml.parsers.DocumentBuilder" factory-bean="documentBuilderFactory"
        factory-method="newDocumentBuilder"/>

  <!-- *****************************
  *
  *
  *   Classes in admin webapp
  *
  *
  *****************************************-->

  <bean id="adminService" class="org.ambraproject.admin.service.impl.AdminServiceImpl">
    <property name="sessionFactory" ref="hibernateSessionFactory"/>
    <property name="onCrossPubListener">
      <list>
        <ref bean="indexingService"/>
      </list>
    </property>
  </bean>

  <bean id="adminAnnotationService" class="org.ambraproject.admin.service.impl.AdminAnnotationServiceImpl">
    <property name="sessionFactory" ref="hibernateSessionFactory"/>
  </bean>

  <bean id="searchUserService" class="org.ambraproject.search.service.SearchUserServiceImpl">
    <property name="sessionFactory" ref="hibernateSessionFactory"/>
  </bean>

  <!-- Defined in src/main/resources/ambra/configuration/defaults.xml -->
  <util:map id="xslTemplateMap">
    <entry key="default"
           value="${ambra.services.ingest.default}"/>
    <entry key="2.0"
           value="${ambra.services.ingest.dtd_2_3}"/>
    <entry key="3.0"
           value="${ambra.services.ingest.dtd_3_0}"/>
  </util:map>

  <bean id="articleClassifier" class="org.ambraproject.service.article.AIArticleClassifier">
    <property name="httpClient" ref="httpClient"/>
    <property name="serviceUrl" value="${ambra.services.ai.url}"/>
  </bean>
  <bean id="ingestArchiveProcessor" class="org.ambraproject.article.service.XslIngestArchiveProcessor">
    <property name="documentBuilder" ref="documentBuilder"/>
    <property name="xslDefaultTemplate" value="${ambra.services.ingest.default}"/>
    <property name="xslTemplateMap" ref="xslTemplateMap"/>
    <property name="configuration" ref="ambraConfiguration"/>
    <property name="articleClassifier" ref="articleClassifier"/>
    <property name="articleService" ref="articleService"/>
  </bean>

  <bean id="ingester" class="org.ambraproject.article.service.IngesterImpl">
    <property name="sessionFactory" ref="hibernateSessionFactory"/>
    <property name="ingestArchiveProcessor" ref="ingestArchiveProcessor"/>
    <property name="fileStoreService" ref="fileStoreService"/>
    <property name="documentManagementService" ref="documentManagementService"/>
    <property name="syndicationService" ref="syndicationService"/>
  </bean>

  <!-- Defined in src/main/resources/ambra/configuration/defaults.xml -->
  <util:map id="xslXrefTemplateMap">
    <entry key="default"
           value="${ambra.services.xreftransform.default}"/>
    <entry key="2.0"
           value="${ambra.services.xreftransform.dtd_2_3}"/>
    <entry key="3.0"
           value="${ambra.services.xreftransform.dtd_3_0}"/>
  </util:map>

  <bean id="documentManagementService"
        class="org.ambraproject.admin.service.impl.DocumentManagementServiceImpl">
    <property name="articleService" ref="articleService"/>
    <property name="journalService" ref="journalService"/>
    <property name="documentDirectory"
              value="${ambra.services.documentManagement.ingestSourceDir}"/>
    <property name="ingestedDocumentDirectory"
              value="${ambra.services.documentManagement.ingestDestinationDir}"/>
    <property name="documentPrefix" value="${ambra.services.documentManagement.documentPrefix}"/>
    <property name="plosDoiUrl" value="${ambra.services.crossref.plos.doiurl}"/>
    <property name="plosEmail" value="${ambra.services.crossref.plos.email}"/>
    <property name="permissionsService" ref="permissionsService"/>
    <property name="fileStoreService" ref="fileStoreService"/>
    <property name="onPublishListeners">
      <list>
        <ref bean="indexingService"/>
      </list>
    </property>
    <property name="onDeleteListeners">
      <list>
        <ref bean="indexingService"/>
      </list>
    </property>
    <property name="xslDefaultTemplate" value="${ambra.services.xreftransform.default}"/>
    <property name="xslTemplateMap" ref="xslXrefTemplateMap"/>
    <property name="sessionFactory" ref="hibernateSessionFactory"/>
  </bean>


  <bean id="hibernateDataSource" class="org.springframework.jndi.JndiObjectFactoryBean">
    <property name="jndiName" value="java:comp/env/jdbc/AmbraDS"/>
  </bean>

  <bean id="fileStoreService" class="org.springframework.jndi.JndiObjectFactoryBean">
    <property name="jndiName" value="java:comp/env/ambra/FileStore"/>
  </bean>

  <bean id="flagService" class="org.ambraproject.admin.flags.service.FlagServiceImpl">
    <property name="sessionFactory" ref="hibernateSessionFactory"/>
    <property name="articleHtmlCache" ref="articleHtmlCache"/>
  </bean>

  <bean id="transactionManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager">
    <property name="sessionFactory" ref="hibernateSessionFactory"/>
  </bean>

  <tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true"/>

  <bean id="hibernateSessionFactory" class="org.springframework.orm.hibernate3.LocalSessionFactoryBean">
    <property name="dataSource" ref="hibernateDataSource"/>
    <property name="mappingLocations">
      <list>
        <value>classpath:org/ambraproject/models/*.hbm.xml</value>
      </list>
    </property>
    <property name="hibernateProperties">
      <props>
        <!-- We might use MySQLInnoDBDialect instead -->
        <prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>
        <prop key="hibernate.show_sql">false</prop>
        <prop key="hibernate.format_sql">false</prop>
      </props>
    </property>
  </bean>


  <!-- Caches -->
  <bean id="cacheService" class="org.ambraproject.admin.service.impl.CacheServiceImpl">
    <property name="cacheManager" ref="cacheManager"/>
  </bean>

  <!--*****************
    *
    * Camel stuff
    *
    * ********************-->

  <!-- setup JMS connection factory -->
  <bean id="jmsConnectionFactory" class="org.apache.activemq.spring.ActiveMQConnectionFactory">
    <property name="brokerURL" value="${ambra.services.activemq}"/>
  </bean>

  <!-- setup spring jms TX manager -->
  <bean id="jmsTransactionManager" class="org.springframework.jms.connection.JmsTransactionManager">
    <property name="connectionFactory" ref="jmsConnectionFactory"/>
  </bean>

  <!-- define Camel activemq component -->
  <bean id="activemq" class="org.apache.activemq.camel.component.ActiveMQComponent">
    <property name="connectionFactory" ref="jmsConnectionFactory"/>
    <!-- define the jms consumer/producer as transacted -->
    <property name="transacted" value="true"/>
    <!-- setup the transaction manager to use -->
    <property name="transactionManager" ref="jmsTransactionManager"/>
    <!-- If connection is not available try to reconnect every 10sec -->
    <property name="recoveryInterval" value="10000"/>
    <!-- Timeout on receiving messages after 5 sec  -->
    <property name="receiveTimeout" value="5000"/>
  </bean>

  <!-- JMS transaction policy -->
  <bean id="PROPAGATION_REQUIRED" class="org.apache.camel.spring.spi.SpringTransactionPolicy">
    <property name="transactionManager" ref="jmsTransactionManager"/>
  </bean>

  <bean id="syndicationService" class="org.ambraproject.admin.service.impl.SyndicationServiceImpl">
    <property name="sessionFactory" ref="hibernateSessionFactory"/>
    <property name="ambraConfiguration" ref="ambraConfiguration"/>
    <property name="messageService" ref="messageService"/>
    <property name="journalService" ref="journalService"/>
  </bean>

  <bean id="pmcResponseConsumer" class="org.ambraproject.queue.PMCResponseConsumer">
    <property name="syndicationService" ref="syndicationService"/>
  </bean>

  <bean id="crossrefResponseConsumer" class="org.ambraproject.queue.CrossrefResponseConsumer">
    <property name="syndicationService" ref="syndicationService"/>
  </bean>

  <bean id="articleDocumentService" class="org.ambraproject.article.service.ArticleDocumentServiceImpl">
    <property name="sessionFactory" ref="hibernateSessionFactory"/>
    <property name="documentBuilderFactory" ref="documentBuilderFactory"/>
    <property name="fileStoreService" ref="fileStoreService"/>
    <property name="journalService" ref="journalService"/>
  </bean>

  <bean id="solrHttpService" class="org.ambraproject.service.search.SolrHttpServiceImpl">
    <property name="config" ref="ambraConfiguration"/>
    <property name="httpClient" ref="httpClient"/>
  </bean>

  <bean id="indexingService" class="org.ambraproject.search.service.IndexingServiceImpl">
    <property name="sessionFactory" ref="hibernateSessionFactory"/>
    <property name="articleDocumentService" ref="articleDocumentService"/>
    <property name="messageSender" ref="messageSender"/>
    <property name="raptorService" ref="raptorService"/>
    <property name="solrHttpService" ref="solrHttpService"/>
    <property name="ambraConfiguration" ref="ambraConfiguration"/>
  </bean>

  <bean id="shutdownStrategy" class="org.apache.camel.impl.DefaultShutdownStrategy">
    <property name="timeout" value="20"/>
    <!-- Wait 20 sec -->
    <property name="timeUnit">
      <util:constant static-field="java.util.concurrent.TimeUnit.SECONDS"/>
    </property>
  </bean>

  <!--
  routeBuilder automatically binds beans with name <target_lowercase>ResponseConsumer to appropriate response
  queues from configuration
  -->
  <bean id="routeBuilder" class="org.ambraproject.queue.Routes"
        depends-on="pmcResponseConsumer, crossrefResponseConsumer, activemq, PROPAGATION_REQUIRED, indexingService, shutdownStrategy">
    <property name="ambraConfiguration" ref="ambraConfiguration"/>
    <property name="mailEndpoint" value="smtp://${ambra.network.hosts.mailhost}"/>
    <!-- property name="redeliveryInterval" value="10"/ -->
  </bean>

  <camelContext xmlns="http://camel.apache.org/schema/spring">
    <jmxAgent id="plos-queue" createConnector="false"/>
    <template id="messageProducerTemplate"/>
    <routeBuilder ref="routeBuilder"/>
  </camelContext>

  <bean id="messageSender" class="org.ambraproject.queue.CamelSender">
    <property name="producerTemplate" ref="messageProducerTemplate"/>
  </bean>

  <bean id="raptorService" class="org.ambraproject.service.raptor.RaptorServiceImpl">
    <property name="httpClient" ref="httpClient"/>
    <property name="serviceUrl" value="${ambra.services.raptor.url}" />
  </bean>

  <bean id="messageService" class="org.ambraproject.queue.MessageServiceImpl">
    <property name="sender" ref="messageSender"/>
    <property name="ambraConfiguration" ref="ambraConfiguration"/>
  </bean>


</beans>
